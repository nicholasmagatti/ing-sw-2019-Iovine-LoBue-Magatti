package it.polimi.ProgettoIngSW2019.controller;

import com.google.gson.Gson;
import it.polimi.ProgettoIngSW2019.common.Event;
import it.polimi.ProgettoIngSW2019.common.LightModel.MyLoadedWeaponsLM;
import it.polimi.ProgettoIngSW2019.common.LightModel.PlayerDataLM;
import it.polimi.ProgettoIngSW2019.common.LightModel.WeaponLM;
import it.polimi.ProgettoIngSW2019.common.Message.Info;
import it.polimi.ProgettoIngSW2019.common.Message.ReloadChoice;
import it.polimi.ProgettoIngSW2019.common.Message.ReloadInfoResponse;
import it.polimi.ProgettoIngSW2019.common.enums.EventType;
import it.polimi.ProgettoIngSW2019.common.utilities.Observer;
import it.polimi.ProgettoIngSW2019.custom_exception.IllegalAttributeException;
import it.polimi.ProgettoIngSW2019.model.*;
import it.polimi.ProgettoIngSW2019.common.enums.AmmoType;
import it.polimi.ProgettoIngSW2019.virtual_view.VirtualView;


import java.util.ArrayList;
import java.util.List;


/**
 * Class ReloadController
 * check reload
 * reload method
 * @author Priscilla Lo Bue
 */
public class ReloadController extends Controller implements Observer<Event> {
    private WeaponCard weaponToReload;
    private Player ownerPlayer;
    private List<WeaponCard> weaponsCanReload = new ArrayList<>();
    private List<AmmoType> reloadCost = new ArrayList<>();



    /**
     * constructor
     * @param turnManager   turnManager
     * @param idConverter   idConverter
     * @param virtualView   virtualView
     */
    public ReloadController(TurnManager turnManager, IdConverter idConverter, VirtualView virtualView, CreateJson createJson) {
        super(turnManager, idConverter, virtualView, createJson);
    }



    /**
     * receive the message from the view
     * check type event
     * do actions based by type event
     * @param event     event sent
     */
    public void update(Event event) {
        if(event.getCommand().equals(EventType.REQUEST_RELOAD_INFO)) {
            reloadInfo(event.getMessageInJsonFormat());
        }

        if(event.getCommand().equals(EventType.REQUEST_RELOAD)) {
            reloadWeapon(event.getMessageInJsonFormat());
        }
    }



    /**
     * check the info to send to reload to the view
     * @param messageJson   message json from view
     */
    public void reloadInfo(String messageJson) {
        //estrapolo il messaggio json in classe con i relativi dati
        Info info = new Gson().fromJson(messageJson, Info.class);

        //verifico che sia il turno del Player che ha richiesto il reload
        if(info.getIdPlayer() != getTurnManager().getCurrentPlayer().getIdPlayer())
            throw new  IllegalAttributeException("It is not Player: " + info.getIdPlayer() + " turn");

        //estraggo il player dal model con idPlayer che mi è stato mandato dalla view
        ownerPlayer = getIdConverter().getPlayerById(info.getIdPlayer());

        //setto la lista delle weapons che posso caricare in base agli ammo che ho
        setListWeaponsCanReload();

        if(weaponsCanReload != null) {
            List<WeaponLM> weaponsCanReloadLM = getCreateJson().createWeaponsListLM(weaponsCanReload);
            String reloadInfoString = new Gson().toJson(new ReloadInfoResponse(ownerPlayer.getIdPlayer(), weaponsCanReloadLM));
            sendInfo(EventType.RESPONSE_REQUEST_RELOAD_INFO, reloadInfoString);
        }
        else {
            String reloadInfoString = new Gson().toJson(new ReloadInfoResponse(ownerPlayer.getIdPlayer(), null));
            sendInfo(EventType.RESPONSE_REQUEST_RELOAD_INFO, reloadInfoString);
        }
    }



    /**
     * creates the list with the weapons can be reloaded
     */
    public void setListWeaponsCanReload() {
        //cerco tutte le armi scariche che posso ricaricare, in base agli ammo che ho
       for(WeaponCard weaponCard:ownerPlayer.getUnloadedWeapons()) {
           //lista ammo di ricarica dell'arma
           reloadCost = weaponCard.getreloadCost();

           //se Player ha abbastanza Ammo aggiunge l'arma nella lista delle armi che il Player può ricaricare
           if(ownerPlayer.hasEnoughAmmo(reloadCost))
               weaponsCanReload.add(weaponCard);
       }
    }



    /**
     * open the message and reload the weapon received
     * send the new player with the attributes modified to the view
     * @param messageJson   message json from the event generated by view
     */
    public void reloadWeapon(String messageJson) {
        ReloadChoice reloadChoice = new Gson().fromJson(messageJson, ReloadChoice.class);

        if(reloadChoice.getIdPlayer() != getTurnManager().getCurrentPlayer().getIdPlayer())
            throw new  IllegalAttributeException("It is not Player: " + reloadChoice.getIdPlayer() + " turn");

        ownerPlayer = getIdConverter().getPlayerById(reloadChoice.getIdPlayer());
        weaponToReload = getIdConverter().getUnloadedWeaponById(ownerPlayer.getIdPlayer(), reloadChoice.getIdWeaponToReload());

        if(weaponToReload == null)
            throw new IllegalAttributeException("WeaponToReload cannot be null");

        reloadCost = weaponToReload.getreloadCost();

        if(ownerPlayer.hasEnoughAmmo(reloadCost))
            ownerPlayer.reload(weaponToReload);
        else
            throw new IllegalAttributeException("The player: " + ownerPlayer.getCharaName() + "with id: " + ownerPlayer.getIdPlayer() + "cannot pay the reload cost");

        //mando al player le nuove weapons cariche
        String loadedWeaponsLMJson = getCreateJson().createMyLoadedWeaponsListLMJson(ownerPlayer);
        sendInfo(EventType.RESPONSE_REQUEST_RELOAD, loadedWeaponsLMJson);


        String playerLMJson = getCreateJson().createPlayerLMJson(ownerPlayer);
        //TODO: notificare a tutti i player playerLMJson
    }
}